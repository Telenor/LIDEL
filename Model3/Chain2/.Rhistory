#############Saved Workspace########################
#code to run post-processing independently, loading saved workspace
setwd("C:/LIDEL/Model3/Chain2")
library(deSolve)
library(gplots)
library(pscl)
library(rootSolve)
library(coda)
library(compiler)
#load saved workspace from storage location
load("C:/LIDEL_rubel/Model3/Chain2/results/trialrun_workspace2.RData")
##################Data Organization################
#results are organized in x_Cinit in a list, where:
# [[1]]=parameters
# [[2]]=all variance
# [[3]]-[[7]]=latent for all litter & time
# [[8]]=list of all process results from burnin:n.iter,
#       litter types listed from [[1]]-[[5]]
##################Parameter results###############
#create mcmc objects
#parameter results
RESULTchain2_params=mcmc(x_Cinit[[1]][burnin:n.iter,])
#save param results
write.csv(RESULTchain2_params, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_params.csv")
#variance results
RESULTchain2_var=mcmc(x_Cinit[[2]][burnin:n.iter,])
#save var results
write.csv(RESULTchain2_var, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_var.csv")
#latent state results
RESULTchain2_alfalfa=mcmc(x_Cinit[[3]][burnin:n.iter,])
#save alfalfa results
write.csv(RESULTchain2_alfalfa, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_alfalfa.csv")
RESULTchain2_ash=mcmc(x_Cinit[[4]][burnin:n.iter,])
#save ash results
write.csv(RESULTchain2_ash, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_ash.csv")
RESULTchain2_bluestem=mcmc(x_Cinit[[5]][burnin:n.iter,])
#save bluestem results
write.csv(RESULTchain2_bluestem, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_bluestem.csv")
RESULTchain2_oak=mcmc(x_Cinit[[6]][burnin:n.iter,])
#save oak results
write.csv(RESULTchain2_oak, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_oak.csv")
RESULTchain2_pine=mcmc(x_Cinit[[7]][burnin:n.iter,])
#save pine results
write.csv(RESULTchain2_pine, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_pine.csv")
##################Data Organization################
#results are organized in x_Cinit in a list, where:
# [[1]]=parameters
# [[2]]=all variance
# [[3]]-[[7]]=latent for all litter & time
# [[8]]=list of all process results from burnin:n.iter,
#       litter types listed from [[1]]-[[5]]
##################Parameter results###############
#create mcmc objects
#parameter results
RESULTchain2_params=mcmc(x_Cinit[[1]][burnin:n.iter,])
#save param results
write.csv(RESULTchain2_params, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_params.csv")
#variance results
RESULTchain2_var=mcmc(x_Cinit[[2]][burnin:n.iter,])
#save var results
write.csv(RESULTchain2_var, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_var.csv")
#latent state results
RESULTchain2_alfalfa=mcmc(x_Cinit[[3]][burnin:n.iter,])
#save alfalfa results
write.csv(RESULTchain2_alfalfa, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_alfalfa.csv")
RESULTchain2_ash=mcmc(x_Cinit[[4]][burnin:n.iter,])
#save ash results
write.csv(RESULTchain2_ash, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_ash.csv")
RESULTchain2_bluestem=mcmc(x_Cinit[[5]][burnin:n.iter,])
#save bluestem results
write.csv(RESULTchain2_bluestem, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_bluestem.csv")
RESULTchain2_oak=mcmc(x_Cinit[[6]][burnin:n.iter,])
#save oak results
write.csv(RESULTchain2_oak, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_oak.csv")
RESULTchain2_pine=mcmc(x_Cinit[[7]][burnin:n.iter,])
#save pine results
write.csv(RESULTchain2_pine, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_pine.csv")
#MCMC object of all latent states
RESULTchain2_latent=mcmc(cbind(
x_Cinit[[3]][burnin:n.iter,],
x_Cinit[[4]][burnin:n.iter,],
x_Cinit[[5]][burnin:n.iter,],
x_Cinit[[6]][burnin:n.iter,],
x_Cinit[[7]][burnin:n.iter,]))
#save all latent results
write.csv(RESULTchain2_latent, file="C:/LIDEL/Model3/Chain2/results/RESULTchain2_latent.csv")
#print results to file
sink("C:/LIDEL/Model3/Chain1/results/CHAIN1_summary.txt")
print(burnin)
print(n.iter)
print("PARAMS")
print(summary(RESULTchain1_params))
print(geweke.diag(RESULTchain1_params))
print("VAR")
print(summary(RESULTchain1_var))
print(geweke.diag(RESULTchain1_var))
print("LATENT")
print(summary(RESULTchain1_latent))
print(geweke.diag(RESULTchain1_latent))
sink()
################plot MCMC results & save to plots folder################
#parameters
jpeg(file="C:/LIDEL/Model3/Chain1/plots/RESULTchain1_PARAMS_A.jpg")
plot(RESULTchain1_params[,1:3])
dev.off()
jpeg(file="C:/LIDEL/Model3/Chain1/plots/RESULTchain1_PARAMS_B.jpg")
plot(RESULTchain1_params[,4:5])
dev.off()
#variance
for(p in 1:26){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain1/plots/RESULTchain1_var", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain1_var[,a:c])
dev.off()
}
#latent, cols 1:63
for(p in 1:21){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain1/plots/RESULTchain1_latent", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain1_latent[,a:c])
dev.off()
}
#latent, cols 64:65
fileNam=paste("C:/LIDEL/Model3/Chain1/plots/RESULTchain1_latent", 22, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain1_latent[,64:65])
dev.off()
#print results to file
sink("C:/LIDEL/Model3/Chain2/results/chain2_summary.txt")
print(burnin)
print(n.iter)
print("PARAMS")
print(summary(RESULTchain2_params))
print(geweke.diag(RESULTchain2_params))
print("VAR")
print(summary(RESULTchain2_var))
print(geweke.diag(RESULTchain2_var))
print("LATENT")
print(summary(RESULTchain2_latent))
print(geweke.diag(RESULTchain2_latent))
sink()
################plot MCMC results & save to plots folder################
#parameters
jpeg(file="C:/LIDEL/Model3/Chain2/plots/RESULTchain2_PARAMS_A.jpg")
plot(RESULTchain2_params[,1:3])
dev.off()
jpeg(file="C:/LIDEL/Model3/Chain2/plots/RESULTchain2_PARAMS_B.jpg")
plot(RESULTchain2_params[,4:5])
dev.off()
#variance
for(p in 1:26){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_var", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_var[,a:c])
dev.off()
}
#latent, cols 1:63
for(p in 1:21){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_latent", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_latent[,a:c])
dev.off()
}
#latent, cols 64:65
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_latent", 22, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_latent[,64:65])
dev.off()
################plot MCMC results & save to plots folder################
#parameters
jpeg(file="C:/LIDEL/Model3/Chain2/plots/RESULTchain2_PARAMS_A.jpg")
plot(RESULTchain2_params[,1:3])
dev.off()
jpeg(file="C:/LIDEL/Model3/Chain2/plots/RESULTchain2_PARAMS_B.jpg")
plot(RESULTchain2_params[,4:5])
dev.off()
#variance- output in sets of 3
for(p in 1:26){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_var", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_var[,a:c])
dev.off()
}
#latent, cols 1:63- output in sets of 3
for(p in 1:21){
a=(p*3)-2
c=(a+2)
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_latent", p, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_latent[,a:c])
dev.off()
}
#latent, cols 64:65- stragglers
fileNam=paste("C:/LIDEL/Model3/Chain2/plots/RESULTchain2_latent", 22, ".jpg", sep="")
jpeg(file=fileNam)
plot(RESULTchain2_latent[,64:65])
dev.off()
i=1
#vector to store RMSE value for each iteration after burnin discarded
all_rmse=vector("numeric", length=(length(burnin:n.iter)-1))
#RMSE function
rmse<-function(error){
sqrt(mean(error^2))
}
#matrices to store latent state estimates of DOC
est_fin_alf_DOC=matrix(0, nrow=length(d_l_list[[1]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_ash_DOC=matrix(0, nrow=length(d_l_list[[2]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_blu_DOC=matrix(0, nrow=length(d_l_list[[3]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_oak_DOC=matrix(0, nrow=length(d_l_list[[4]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_pin_DOC=matrix(0, nrow=length(d_l_list[[5]][[2]][,1]), ncol=length(burnin:n.iter))
#matrices to store latent state estimates of CO2
est_fin_alf_CO2=matrix(0, nrow=length(d_l_list[[1]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_ash_CO2=matrix(0, nrow=length(d_l_list[[2]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_blu_CO2=matrix(0, nrow=length(d_l_list[[3]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_oak_CO2=matrix(0, nrow=length(d_l_list[[4]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_pin_CO2=matrix(0, nrow=length(d_l_list[[5]][[3]][,1]), ncol=length(burnin:n.iter))
#matrices to store out-of-sample estimates of DOC
final_alfalfa_DOC = matrix(0, nrow=length(non_d_l_list[[1]][[1]][,1]), ncol=length(burnin:n.iter))
final_ash_DOC     = matrix(0, nrow=length(non_d_l_list[[2]][[1]][,1]), ncol=length(burnin:n.iter))
final_bluestem_DOC= matrix(0, nrow=length(non_d_l_list[[3]][[1]][,1]), ncol=length(burnin:n.iter))
final_oak_DOC     = matrix(0, nrow=length(non_d_l_list[[4]][[1]][,1]), ncol=length(burnin:n.iter))
final_pine_DOC    = matrix(0, nrow=length(non_d_l_list[[5]][[1]][,1]), ncol=length(burnin:n.iter))
#matrices to store out-of-sample estimates of CO2
final_alfalfa_CO2 = matrix(0, nrow=length(non_d_l_list[[1]][[2]][,1]), ncol=length(burnin:n.iter))
final_ash_CO2     = matrix(0, nrow=length(non_d_l_list[[2]][[2]][,1]), ncol=length(burnin:n.iter))
final_bluestem_CO2= matrix(0, nrow=length(non_d_l_list[[3]][[2]][,1]), ncol=length(burnin:n.iter))
final_oak_CO2     = matrix(0, nrow=length(non_d_l_list[[4]][[2]][,1]), ncol=length(burnin:n.iter))
final_pine_CO2    = matrix(0, nrow=length(non_d_l_list[[5]][[2]][,1]), ncol=length(burnin:n.iter))
#vector to store RMSE value for each iteration after burnin discarded
all_rmse=vector("numeric", length=(length(burnin:n.iter)-1))
#RMSE function
rmse<-function(error){
sqrt(mean(error^2))
}
#matrices to store latent state estimates of DOC
est_fin_alf_DOC=matrix(0, nrow=length(d_l_list[[1]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_ash_DOC=matrix(0, nrow=length(d_l_list[[2]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_blu_DOC=matrix(0, nrow=length(d_l_list[[3]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_oak_DOC=matrix(0, nrow=length(d_l_list[[4]][[2]][,1]), ncol=length(burnin:n.iter))
est_fin_pin_DOC=matrix(0, nrow=length(d_l_list[[5]][[2]][,1]), ncol=length(burnin:n.iter))
#matrices to store latent state estimates of CO2
est_fin_alf_CO2=matrix(0, nrow=length(d_l_list[[1]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_ash_CO2=matrix(0, nrow=length(d_l_list[[2]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_blu_CO2=matrix(0, nrow=length(d_l_list[[3]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_oak_CO2=matrix(0, nrow=length(d_l_list[[4]][[3]][,1]), ncol=length(burnin:n.iter))
est_fin_pin_CO2=matrix(0, nrow=length(d_l_list[[5]][[3]][,1]), ncol=length(burnin:n.iter))
#matrices to store out-of-sample estimates of DOC
final_alfalfa_DOC = matrix(0, nrow=length(non_d_l_list[[1]][[1]][,1]), ncol=length(burnin:n.iter))
final_ash_DOC     = matrix(0, nrow=length(non_d_l_list[[2]][[1]][,1]), ncol=length(burnin:n.iter))
final_bluestem_DOC= matrix(0, nrow=length(non_d_l_list[[3]][[1]][,1]), ncol=length(burnin:n.iter))
final_oak_DOC     = matrix(0, nrow=length(non_d_l_list[[4]][[1]][,1]), ncol=length(burnin:n.iter))
final_pine_DOC    = matrix(0, nrow=length(non_d_l_list[[5]][[1]][,1]), ncol=length(burnin:n.iter))
#matrices to store out-of-sample estimates of CO2
final_alfalfa_CO2 = matrix(0, nrow=length(non_d_l_list[[1]][[2]][,1]), ncol=length(burnin:n.iter))
final_ash_CO2     = matrix(0, nrow=length(non_d_l_list[[2]][[2]][,1]), ncol=length(burnin:n.iter))
final_bluestem_CO2= matrix(0, nrow=length(non_d_l_list[[3]][[2]][,1]), ncol=length(burnin:n.iter))
final_oak_CO2     = matrix(0, nrow=length(non_d_l_list[[4]][[2]][,1]), ncol=length(burnin:n.iter))
final_pine_CO2    = matrix(0, nrow=length(non_d_l_list[[5]][[2]][,1]), ncol=length(burnin:n.iter))
#alfalfa non-estimated time points
final_alfalfa_DOC[,i]=subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,2]))
-
subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,1]))
#alfalfa non-estimated time points
final_alfalfa_DOC[,i]=subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,2]))-
subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,1]))
#alfalfa non-estimated time points
final_alfalfa_DOC[,i]=subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,2])) -
subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,1]))
final_alfalfa_DOC[,i]
#ash non-estimated time points
final_ash_DOC[,i]=subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,2]))-
subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,1]))
final_ash_DOC[,i]
final_ash_DOC[,i]
#ash non-estimated time points
final_ash_DOC[,i]=subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,2])) -
subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,1]))
final_ash_DOC[,i]
#C6, DOC (calculate difference between measurement timepoints)
#alfalfa non-estimated time points
final_alfalfa_DOC[,i]=subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,2])) -
subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[1]][,1]))
#alfalfa error DOC
error_alfalfa_DOC=data_nonMCMC[[1]][[1]][,3:5] -final_alfalfa_DOC[,i]
#alfalfa, estimated time points
est_fin_alf_DOC[,i]=subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(d_l_list[[1]][[2]][,2])) -
subset(x_Cinit[[8]][[1]][,7,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(d_l_list[[1]][[2]][,1]))
#ash non-estimated time points
final_ash_DOC[,i]=subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,2])) -
subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[1]][,1]))
#ash error DOC
error_ash_DOC=data_nonMCMC[[2]][[1]][,3:5]-final_ash_DOC[,i]
#ash, estimated time points
est_fin_ash_DOC[,i]=subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(d_l_list[[2]][[2]][,2])) -
subset(x_Cinit[[8]][[2]][,7,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(d_l_list[[2]][[2]][,1]))
#bluestem non-estimated time points
final_bluestem_DOC[,i]=subset(x_Cinit[[8]][[3]][,7,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(non_d_l_list[[3]][[1]][,2])) -
subset(x_Cinit[[8]][[3]][,7,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(non_d_l_list[[3]][[1]][,1]))
#bluestem error DOC
error_bluestem_DOC=data_nonMCMC[[3]][[1]][,3:5]-final_bluestem_DOC[,i]
#bluestem, estimated time points
est_fin_blu_DOC[,i]=subset(x_Cinit[[8]][[3]][,7,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(d_l_list[[3]][[2]][,2])) -
subset(x_Cinit[[8]][[3]][,7,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(d_l_list[[3]][[2]][,1]))
#oak non-estimated time points
final_oak_DOC[,i]=subset(x_Cinit[[8]][[4]][,7,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(non_d_l_list[[4]][[1]][,2])) -
subset(x_Cinit[[8]][[4]][,7,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(non_d_l_list[[4]][[1]][,1]))
#oak error DOC
error_oak_DOC=data_nonMCMC[[4]][[1]][,3:5]-final_oak_DOC[,i]
#oak, estimated time points
est_fin_oak_DOC[,i]=subset(x_Cinit[[8]][[4]][,7,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(d_l_list[[4]][[2]][,2])) -
subset(x_Cinit[[8]][[4]][,7,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(d_l_list[[4]][[2]][,1]))
#pine non-estimated time points
final_pine_DOC[,i]=subset(x_Cinit[[8]][[5]][,7,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(non_d_l_list[[5]][[1]][,2])) -
subset(x_Cinit[[8]][[5]][,7,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(non_d_l_list[[5]][[1]][,1]))
#pine error DOC
error_pine_DOC=data_nonMCMC[[5]][[1]][,3:5]-final_pine_DOC[,i]
#pine, estimated time points
est_fin_pin_DOC[,i]=subset(x_Cinit[[8]][[5]][,7,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(d_l_list[[5]][[2]][,2])) -
subset(x_Cinit[[8]][[5]][,7,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(d_l_list[[5]][[2]][,1]))
#C7, CO2 (calculate difference between measurement timepoints)
#alfalfa non-estimated time points
final_alfalfa_CO2[,i]=subset(x_Cinit[[8]][[1]][,8,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[2]][,2])) -
subset(x_Cinit[[8]][[1]][,8,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(non_d_l_list[[1]][[2]][,1]))
#alfalfa error CO2
error_alfalfa_CO2=data_nonMCMC[[1]][[2]][,3:5]-final_alfalfa_CO2[,i]
#alfalfa, estimated time points
est_fin_alf_CO2[,i]=subset(x_Cinit[[8]][[1]][,8,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(d_l_list[[1]][[3]][,2])) -
subset(x_Cinit[[8]][[1]][,8,i],
x_Cinit[[8]][[1]][,1,i] %in%
as.numeric(d_l_list[[1]][[3]][,1]))
#ash non-estimated time points
final_ash_CO2[,i]=subset(x_Cinit[[8]][[2]][,8,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[2]][,2])) -
subset(x_Cinit[[8]][[2]][,8,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(non_d_l_list[[2]][[2]][,1]))
#ash error CO2
error_ash_CO2=data_nonMCMC[[2]][[2]][,3:5]-final_ash_CO2[,i]
#ash, estimated time points
est_fin_ash_CO2[,i]=subset(x_Cinit[[8]][[2]][,8,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(d_l_list[[2]][[3]][,2])) -
subset(x_Cinit[[8]][[2]][,8,i],
x_Cinit[[8]][[2]][,1,i] %in%
as.numeric(d_l_list[[2]][[3]][,1]))
#bluestem non-estimated time points
final_bluestem_CO2[,i]=subset(x_Cinit[[8]][[3]][,8,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(non_d_l_list[[3]][[2]][,2])) -
subset(x_Cinit[[8]][[3]][,8,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(non_d_l_list[[3]][[2]][,1]))
#bluestem error CO2
error_bluestem_CO2=data_nonMCMC[[3]][[2]][,3:5]-final_bluestem_CO2[,i]
#bluestem, estimated time points
est_fin_blu_CO2[,i]=subset(x_Cinit[[8]][[3]][,8,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(d_l_list[[3]][[3]][,2])) -
subset(x_Cinit[[8]][[3]][,8,i],
x_Cinit[[8]][[3]][,1,i] %in%
as.numeric(d_l_list[[3]][[3]][,1]))
#oak non-estimated time points
final_oak_CO2[,i]=subset(x_Cinit[[8]][[4]][,8,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(non_d_l_list[[4]][[2]][,2])) -
subset(x_Cinit[[8]][[4]][,8,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(non_d_l_list[[4]][[2]][,1]))
#oak error CO2
error_oak_CO2=data_nonMCMC[[4]][[2]][,3:5]-final_oak_CO2[,i]
#oak, estimated time points
est_fin_oak_CO2[,i]=subset(x_Cinit[[8]][[4]][,8,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(d_l_list[[4]][[3]][,2])) -
subset(x_Cinit[[8]][[4]][,8,i],
x_Cinit[[8]][[4]][,1,i] %in%
as.numeric(d_l_list[[4]][[3]][,1]))
#pine non-estimated time points
final_pine_CO2[,i]=subset(x_Cinit[[8]][[5]][,8,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(non_d_l_list[[5]][[2]][,2])) -
subset(x_Cinit[[8]][[5]][,8,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(non_d_l_list[[5]][[2]][,1]))
#pine error CO2
error_pine_CO2=data_nonMCMC[[5]][[2]][,3:5]-final_pine_CO2[,i]
#alfalfa, estimated time points
est_fin_pin_CO2[,i]=subset(x_Cinit[[8]][[5]][,8,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(d_l_list[[5]][[3]][,2])) -
subset(x_Cinit[[8]][[5]][,8,i],
x_Cinit[[8]][[5]][,1,i] %in%
as.numeric(d_l_list[[5]][[3]][,1]))
#bind all measured/modeled error into single object
all_error=rbind(error_alfalfa_DOC, error_ash_DOC, error_bluestem_DOC, error_oak_DOC, error_pine_DOC,
error_alfalfa_CO2, error_ash_CO2, error_bluestem_CO2, error_oak_CO2, error_pine_CO2)
#calculate RMSE for iteration
all_rmse[i]=rmse(all_error)
all_rmse[i]
all_rmse[i:3]
x_Cinit[[8]][[1]][,,i]
